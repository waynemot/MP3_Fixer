/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mp3_fixer;

import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import com.mpatric.mp3agic.*;
import java.util.ArrayList;
import java.util.Stack;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author wmotycka
 */
public class Mp3Fixer extends javax.swing.JFrame {

    /**
     * Creates new form Mp3Fixer
     */
    String _file_name;
    Mp3Fixer currentFIxer;

    public Mp3Fixer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mp3_FixerDesktopPane = new javax.swing.JDesktopPane();
        mp3_FileScrollPane = new javax.swing.JScrollPane();
        mp3_FilesTable = new javax.swing.JTable();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mp3_FilesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Filename", "Directory", "MP3 Title", "MP3 Artist", "MP3 Album"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        mp3_FilesTable.setColumnSelectionAllowed(true);
        mp3_FileScrollPane.setViewportView(mp3_FilesTable);
        mp3_FilesTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        mp3_FixerDesktopPane.setLayer(mp3_FileScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout mp3_FixerDesktopPaneLayout = new javax.swing.GroupLayout(mp3_FixerDesktopPane);
        mp3_FixerDesktopPane.setLayout(mp3_FixerDesktopPaneLayout);
        mp3_FixerDesktopPaneLayout.setHorizontalGroup(
            mp3_FixerDesktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mp3_FixerDesktopPaneLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(mp3_FileScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 618, Short.MAX_VALUE)
                .addContainerGap())
        );
        mp3_FixerDesktopPaneLayout.setVerticalGroup(
            mp3_FixerDesktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mp3_FixerDesktopPaneLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(mp3_FileScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                .addContainerGap())
        );

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentMenuItem.setMnemonic('c');
        contentMenuItem.setText("Contents");
        helpMenu.add(contentMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mp3_FixerDesktopPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mp3_FixerDesktopPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        String file = null;
        String current = null;
        java.io.File _file = null;
        try {
            current = new java.io.File( "." ).getCanonicalPath();
        } catch (IOException ex) {
            Logger.getLogger(Mp3Fixer.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (null != current) {
            javax.swing.JFileChooser jfc = new JFileChooser(current);
            jfc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

            int returnVal = jfc.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
               _file = jfc.getSelectedFile();
               _file_name = _file.getPath();
               file = _file_name;
            } else {
               _file_name = "None.";  
               file = null;
            } 
            
            //String f_path = (,false), menuBar, DISPOSE_ON_CLOSE);
            if (file == null || file.isEmpty()) {
                JOptionPane.showMessageDialog(rootPane,"Null/empty filename string");
            }
            if (_file != null) {
                if(_file.isDirectory()) {
                    MultipleMp3Files(file);
                }
                else if (_file.exists()) {
                    SingleMp3File(file);
                }
                else {
                    JOptionPane.showMessageDialog(rootPane, "The specified path does not exist.");
                }
            }
        }
    }//GEN-LAST:event_openMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Mp3Fixer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Mp3Fixer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Mp3Fixer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Mp3Fixer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                // Create the JFrame object and make it visible
                final Mp3Fixer mp3fixer = new Mp3Fixer();
                currentFixer = mp3fixer;
                mp3fixer.setVisible(true);
            }
        });
    }
    static Mp3Fixer currentFixer;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JScrollPane mp3_FileScrollPane;
    private javax.swing.JTable mp3_FilesTable;
    private javax.swing.JDesktopPane mp3_FixerDesktopPane;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables

    private void actionPerformed() {
        
    }

    private void SingleMp3File(String file) {
        System.out.println("The function to handle a single file fired: "+file);
        //JOptionPane.showMessageDialog(rootPane, "This is a file that I can read: "+file);
        try {
            String title, album, artist;
            String filename = file.substring(file.lastIndexOf(File.separator)+1);
            String path = file.substring(0, file.lastIndexOf(File.separator));
            Mp3File requested_file = new Mp3File(file);
            ID3v1 v1tag = requested_file.getId3v1Tag();
            if (v1tag != null) {
              if(!v1tag.getAlbum().isEmpty()) {
                album = v1tag.getAlbum();
              } else album = "";
              if(!v1tag.getTitle().isEmpty()) {
                title = v1tag.getTitle();
              } else title = "";
              if(!v1tag.getArtist().isEmpty()) {
                artist = v1tag.getArtist();
              } else artist = "";
              String[][] values = new String[1][5];
              values[0][0] = filename;
              values[0][1] = path;
              values[0][2] = title;
              values[0][3] = artist;
              values[0][4] = album;
              applyData(values);
            }
        } catch (IOException | UnsupportedTagException | InvalidDataException ex) {
            Logger.getLogger(Mp3Fixer.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    private void applyData(String[][] rows) {
        if (rows.length > 0) {
            int row_idx = 0;
            int current_row_count = currentFixer.mp3_FilesTable.getModel().getRowCount();
            currentFixer.mp3_FilesTable.setAutoCreateColumnsFromModel(true);
            DefaultTableModel model = (DefaultTableModel) currentFixer.mp3_FilesTable.getModel();
            if (current_row_count < rows.length) {
                for(int i = current_row_count; i < rows.length; i++) {
                    model.addRow(new Object[]{"","","","",""});
                }
            }
            else if (current_row_count > rows.length) {
                for(int i = current_row_count; i > rows.length; i--) {
                    model.removeRow(0);
                }
            }
            for (; row_idx < rows.length; row_idx++) {
                currentFixer.mp3_FilesTable.getModel().setValueAt(rows[row_idx][0], row_idx, 0);
                currentFixer.mp3_FilesTable.getModel().setValueAt(rows[row_idx][1], row_idx, 1);
                currentFixer.mp3_FilesTable.getModel().setValueAt(rows[row_idx][2], row_idx, 2);
                currentFixer.mp3_FilesTable.getModel().setValueAt(rows[row_idx][3], row_idx, 3);
                currentFixer.mp3_FilesTable.getModel().setValueAt(rows[row_idx][4], row_idx, 4);
            }
        }
    }

    private void MultipleMp3Files(String file) {
        System.out.println("The function to handle multiple files fired: "+file);
        //JOptionPane.showMessageDialog(rootPane, "This is a directory that I will traverse: "+file);
        java.io.File directory = new File(file);
        String[] directory_list = directory.list();
        String path = null;
        try {
            path = directory.getCanonicalPath();
        }
        catch(IOException ioe) {
            Logger.getLogger(Mp3Fixer.class.getName()).log(Level.SEVERE, ioe.getMessage());
        }
        ArrayList<String> file_stack = new ArrayList<>();
        for (String directory_list1 : directory_list) {
            File tmp_file = new File(path+File.separator+directory_list1);
            if(tmp_file.isFile() && tmp_file.getName().endsWith(".mp3")) {
                file_stack.add(path+"/"+directory_list1);
            }
            else if (tmp_file.isDirectory()) {
                ArrayList<String> flist = descend_directory(path, directory_list1);
                file_stack.addAll(flist);
            }
        }
        System.out.println("DEBUG: finished descent found "+file_stack.size()+" entries");
        if(!file_stack.isEmpty()) {
            int table_row = 0;
            String[][] table_rows = new String[file_stack.size()][5];
            for(String file_stack_item : file_stack) {
                String filename = file_stack_item.substring(file_stack_item.lastIndexOf(File.separator)+1);
                String file_path = file_stack_item.substring(0, file_stack_item.lastIndexOf(File.separator));
                Mp3File requested_file = null;
                try {
                    requested_file = new Mp3File(file_stack_item);
                } catch (IOException | UnsupportedTagException | InvalidDataException ex) {
                    Logger.getLogger(Mp3Fixer.class.getName()).log(Level.SEVERE, null, ex);
                }
                ID3v1 v1tag = null;
                if(requested_file != null)
                    v1tag = requested_file.getId3v1Tag();
                if(v1tag != null) {
                    table_rows[table_row][2] = v1tag.getTitle();
                    table_rows[table_row][3] = v1tag.getArtist();
                    table_rows[table_row][4] = v1tag.getAlbum();
                }
                table_rows[table_row][0] = filename;
                table_rows[table_row][1] = file_path;
                
                // last
                table_row++;
            }
            if(table_rows.length > 0) {
                applyData(table_rows);
            }
        }
    }
    private ArrayList<String> descend_directory(String root_path, String file) {
        System.out.println("DEBUG: descend_dir(): root_path: "+root_path+" file: "+file);
        ArrayList<String> ret_list = new ArrayList<>();
        File f = new File(root_path+File.separator+file);
        if (f.exists() && f.canRead()) {
            if(f.isFile() && f.getName().endsWith(".mp3")) {
                ret_list.add(root_path+File.separator+file);
            } 
            else if (f.isDirectory()) {
                for(int i = 0; i < f.list().length; i++) {
                    File ff = new File(f.getAbsolutePath()+File.separator+f.list()[i]);
                    if (ff.isDirectory()) {
                        ArrayList<String> tmp_list = descend_directory(f.getAbsolutePath(),f.list()[i]);
                        ret_list.addAll(tmp_list);
                    }
                    else if (ff.isFile()) {
                        if (f.list()[i].endsWith(".mp3")) {
                            ret_list.add(f.getAbsolutePath()+File.separator+f.list()[i]);
                        }
                    }
                }
            }
        }
        System.out.println("DEBUG: descend_dir() returning "+ret_list.size()+" records");
        return ret_list;
    }
     
    
    //Mp3File mp3file = new Mp3File("src/test/resources/v1andv23tagswithalbumimage.mp3");

}
